{"name": "[Вопросы о важном] Проверка на соответствие текста в ответе на вопрос 1, браузер: firefox", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: Element <div id=\"accordion__heading-0\" class=\"accordion__button\"> is not clickable at point (1594,372) because another element <img src=\"/assets/scooter.png\"> obscures it\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:337:5\nwebdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:177:11\ninteraction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:136:11\nclickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:205:29\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:85:31", "trace": "self = <test_accordion.TestAccordion object at 0x00000255DE91C770>, question_xpath = \"//div[@id='accordion__heading-0']\"\nanswer_xpath = \"//div[@id='accordion__panel-0']//p\", expected_answer = 'Сутки — 400 рублей. Оплата курьеру — наличными или картой.', question_number = 1\nrequest = <FixtureRequest for <Function test_question_answer[firefox-//div[@id='accordion__heading-0']-//div[@id='accordion__pan...14 \\u043d\\u0430\\u043b\\u0438\\u0447\\u043d\\u044b\\u043c\\u0438 \\u0438\\u043b\\u0438 \\u043a\\u0430\\u0440\\u0442\\u043e\\u0439.-1]>>\n\n    @allure.step(\"Клик по вопросу\")\n    @pytest.mark.parametrize(\n        \"question_xpath, answer_xpath, expected_answer, question_number\",\n        [\n            (MainPageLocators.QUESTION_0, MainPageLocators.ANSWER_0, accordion_data[\"items\"][0][\"answer\"], 1),\n            (MainPageLocators.QUESTION_1, MainPageLocators.ANSWER_1, accordion_data[\"items\"][1][\"answer\"], 2),\n            (MainPageLocators.QUESTION_2, MainPageLocators.ANSWER_2, accordion_data[\"items\"][2][\"answer\"], 3),\n            (MainPageLocators.QUESTION_3, MainPageLocators.ANSWER_3, accordion_data[\"items\"][3][\"answer\"], 4),\n            (MainPageLocators.QUESTION_4, MainPageLocators.ANSWER_4, accordion_data[\"items\"][4][\"answer\"], 5),\n            (MainPageLocators.QUESTION_5, MainPageLocators.ANSWER_5, accordion_data[\"items\"][5][\"answer\"], 6),\n            (MainPageLocators.QUESTION_6, MainPageLocators.ANSWER_6, accordion_data[\"items\"][6][\"answer\"], 7),\n            (MainPageLocators.QUESTION_7, MainPageLocators.ANSWER_7, accordion_data[\"items\"][7][\"answer\"], 8),\n        ]\n    )\n    def test_question_answer(self, question_xpath, answer_xpath, expected_answer, question_number, request):\n        # Установка динамического заголовка и описания для теста\n        browser_name = request.node.callspec.params.get(\"driver\", \"unknown\")\n        allure.dynamic.title(get_allure_title_for_question(question_number, browser_name))\n        allure.dynamic.description(get_allure_description_for_question(question_number))\n    \n        self.scroll_to_faq_section()\n>       self.page.click_question(question_xpath)\n\ntests\\test_accordion.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\main_page.py:28: in click_question\n    question_element.click()\nC:\\Users\\crash\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\crash\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\crash\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000255DC20D640>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <div id=\\\\\"accordion__headi...sys.mjs:205:29\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:85:31\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <div id=\"accordion__heading-0\" class=\"accordion__button\"> is not clickable at point (1594,372) because another element <img src=\"/assets/scooter.png\"> obscures it\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nE       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:337:5\nE       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:177:11\nE       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:136:11\nE       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:205:29\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:85:31\n\nC:\\Users\\crash\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "description": "Клик по вопросу 1 и проверка ответа", "steps": [{"name": "Клик по вопросу", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: Element <div id=\"accordion__heading-0\" class=\"accordion__button\"> is not clickable at point (1594,372) because another element <img src=\"/assets/scooter.png\"> obscures it\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:337:5\nwebdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:177:11\ninteraction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:136:11\nclickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:205:29\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:85:31\n\n", "trace": "  File \"C:\\Users\\crash\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"G:\\PycharmProjects\\YA_Sprint_6\\tests\\test_accordion.py\", line 44, in test_question_answer\n    self.page.click_question(question_xpath)\n  File \"G:\\PycharmProjects\\YA_Sprint_6\\pages\\main_page.py\", line 28, in click_question\n    question_element.click()\n  File \"C:\\Users\\crash\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Users\\crash\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\crash\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\crash\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "steps": [{"name": "Прокрутка к секции 'Вопросы о важном'", "status": "passed", "start": 1723668848268, "stop": 1723668848279}], "parameters": [{"name": "question_xpath", "value": "'//div[@id='accordion__heading-0']'"}, {"name": "answer_xpath", "value": "'//div[@id='accordion__panel-0']//p'"}, {"name": "expected_answer", "value": "'Сутки — 400 рублей. Оплата курьеру — наличными или картой.'"}, {"name": "question_number", "value": "1"}, {"name": "request", "value": "<FixtureRequest for <Function test_question_answer[firefox-//div[@id='accordion__heading-0']-//div[@id='accordion__panel-0']//p-\\u0421\\u0443\\u0442\\u043a\\u0438 \\u2014 400 \\u0440\\u0443\\u0431\\u043b\\u0435\\u0439. \\u041e\\u043f\\u043b\\u0430\\u0442\\u0430 \\u043a\\u0443\\u0440\\u044c\\u0435\\u0440\\u0443 \\u2014 \\u043d\\u0430\\u043b\\u0438\\u0447\\u043d\\u044b\\u043c\\u0438 \\u0438\\u043b\\u0438 \\u043a\\u0430\\u0440\\u0442\\u043e\\u0439.-1]>>"}], "start": 1723668848268, "stop": 1723668848287}], "parameters": [{"name": "driver", "value": "'firefox'"}, {"name": "question_xpath", "value": "'//div[@id='accordion__heading-0']'"}, {"name": "answer_xpath", "value": "'//div[@id='accordion__panel-0']//p'"}, {"name": "expected_answer", "value": "'Сутки — 400 рублей. Оплата курьеру — наличными или картой.'"}, {"name": "question_number", "value": "1"}], "start": 1723668848268, "stop": 1723668848307, "uuid": "09d51051-16de-43b2-aa05-7248ab6b0884", "historyId": "ce3ccd089ea8df1eed1ec8e0a780a421", "testCaseId": "44d6c6c2f240985dd01d17579f79b505", "fullName": "tests.test_accordion.TestAccordion#test_question_answer", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('driver')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_accordion"}, {"name": "subSuite", "value": "TestAccordion"}, {"name": "host", "value": "FUN-Spectrum"}, {"name": "thread", "value": "20896-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_accordion"}]}