{"name": "Проверка оформления заказа через кнопку \"Заказать\" в шапке сайта, с оформлением заказа. Используя тестовые данные: 1 в браузере chrome", "status": "failed", "statusDetails": {"message": "AssertionError: Сообщение о подтверждении заказа не найдено", "trace": "self = <test_create_order.TestOrder object at 0x00000255DE91D7C0>, index = 1\ndata = {'address': 'Проспект Мира 15', 'first_name': 'Алла', 'last_name': 'Ахматова', 'phone': '+79007654321', ...}\nclick_order_button_method = 'click_order_button_in_header', confirm_order = 'yes'\nrequest = <FixtureRequest for <Function test_create_order[chrome-click_order_button_in_header-1-data1-yes]>>\n\n    @pytest.mark.parametrize(\"confirm_order\", [\"yes\", \"no\"])\n    @pytest.mark.parametrize(\"index, data\", list(enumerate(test_data)))  # Передаем индекс и данные\n    @pytest.mark.parametrize(\n        \"click_order_button_method\",\n        [\"click_order_button_in_header\", \"click_order_button_in_main_page\"],\n    )\n    def test_create_order(self, index, data, click_order_button_method, confirm_order, request):\n        browser_name = request.node.callspec.params.get(\"driver\", \"unknown\")\n        test_title = generate_test_title(click_order_button_method, confirm_order, browser_name, index)\n        allure.dynamic.title(test_title)\n    \n        # Точка входа\n        with allure.step(\"1. Открыть главную страницу и перейти к форме заказа\"):\n            self.main_page.open()\n    \n        # Последовательный набор шагов\n        with allure.step(f\"2. Нажать на кнопку 'Заказать' ({click_order_button_method})\"):\n            if click_order_button_method == \"click_order_button_in_header\":\n                self.main_page.click_order_button_in_header()\n            else:\n                self.main_page.click_order_button_in_main_page()\n    \n        with allure.step(\"3. Заполнить форму заказа и нажать 'Далее'\"):\n            self.order_page.fill_first_name(data[\"first_name\"])\n            self.order_page.fill_last_name(data[\"last_name\"])\n            self.order_page.fill_address(data[\"address\"])\n            self.order_page.fill_phone(data[\"phone\"])\n            self.order_page.click_metro_station_input()\n            self.order_page.select_first_metro_station()\n            self.order_page.click_next_button()\n    \n        with allure.step(\"4. Заполнить вторую форму заказа данными\"):\n            self.order_page.fill_rent_date(data[\"rent_date\"])\n            self.order_page.click_rent_period_dropdown()\n            self.order_page.select_rent_duration()\n            self.order_page.select_scooter_color(data[\"scooter_color\"])\n            self.order_page.click_order_button()\n    \n        # Уникальные шаги\n        with allure.step(f\"5. {('Подтвердить' if confirm_order == 'yes' else 'Отменить')} заказ\"):\n            assert self.order_page.is_order_modal_opened(), \"Окно подтверждения заказа не открылось\"\n            if confirm_order == \"yes\":\n                self.order_page.click_order_modal_yes_button()\n>               self.order_page.check_order_confirmation()\n\ntests\\test_create_order.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.order_page.OrderPage object at 0x00000255DE962E40>\n\n    def check_order_confirmation(self):\n        confirmation_message = self.wait.until(\n            EC.visibility_of_element_located(\n                (By.XPATH, \"//div[contains(@class, 'Order_ModalHeader__3FDaJ')]\")\n            )\n        )\n>       assert \"Заказ оформлен\" in confirmation_message.text, \"Сообщение о подтверждении заказа не найдено\"\nE       AssertionError: Сообщение о подтверждении заказа не найдено\n\npages\\order_page.py:129: AssertionError"}, "steps": [{"name": "1. Открыть главную страницу и перейти к форме заказа", "status": "passed", "start": 1723668873385, "stop": 1723668873399}, {"name": "2. Нажать на кнопку 'Заказать' (click_order_button_in_header)", "status": "passed", "start": 1723668873399, "stop": 1723668873434}, {"name": "3. Заполнить форму заказа и нажать 'Далее'", "status": "passed", "start": 1723668873434, "stop": 1723668873708}, {"name": "4. Заполнить вторую форму заказа данными", "status": "passed", "start": 1723668873708, "stop": 1723668873883}, {"name": "5. Подтвердить заказ", "status": "failed", "statusDetails": {"message": "AssertionError: Сообщение о подтверждении заказа не найдено\n", "trace": "  File \"G:\\PycharmProjects\\YA_Sprint_6\\tests\\test_create_order.py\", line 62, in test_create_order\n    self.order_page.check_order_confirmation()\n  File \"G:\\PycharmProjects\\YA_Sprint_6\\pages\\order_page.py\", line 129, in check_order_confirmation\n    assert \"Заказ оформлен\" in confirmation_message.text, \"Сообщение о подтверждении заказа не найдено\"\n"}, "start": 1723668873883, "stop": 1723668873918}], "parameters": [{"name": "driver", "value": "'chrome'"}, {"name": "click_order_button_method", "value": "'click_order_button_in_header'"}, {"name": "index", "value": "1"}, {"name": "data", "value": "{'first_name': 'Алла', 'last_name': 'Ахматова', 'address': 'Проспект Мира 15', 'phone': '+79007654321', 'rent_date': '31.12.2024', 'rent_duration': 'двое суток', 'scooter_color': 'grey'}"}, {"name": "confirm_order", "value": "'yes'"}], "start": 1723668873385, "stop": 1723668873919, "uuid": "684809a7-df0b-4ed1-89dd-98a7392c45b5", "historyId": "76838e68a4e971afd074694705598c7b", "testCaseId": "33a31d45f4dc080fcecaa9c5f3b15413", "fullName": "tests.test_create_order.TestOrder#test_create_order", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('driver')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_create_order"}, {"name": "subSuite", "value": "TestOrder"}, {"name": "host", "value": "FUN-Spectrum"}, {"name": "thread", "value": "20896-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_create_order"}]}